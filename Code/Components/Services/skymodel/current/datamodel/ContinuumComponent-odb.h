// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef CONTINUUM_COMPONENT_ODB_H
#define CONTINUUM_COMPONENT_ODB_H

// Begin prologue.
//
#include <odb/boost/version.hxx>
#if ODB_BOOST_VERSION != 2040000 // 2.4.0
#  error ODB and C++ compilers see different libodb-boost interface versions
#endif
#include <boost/shared_ptr.hpp>
#include <odb/boost/smart-ptr/pointer-traits.hxx>
#include <odb/boost/smart-ptr/wrapper-traits.hxx>
//
// End prologue.

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "ContinuumComponent.h"

#include "DataSource-odb.h"
#include "Polarisation-odb.h"

#include <memory>
#include <cstddef>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#ifdef BOOST_TR1_MEMORY_HPP_INCLUDED
#  include <odb/tr1/wrapper-traits.hxx>
#  include <odb/tr1/pointer-traits.hxx>
#endif
#include <odb/container-traits.hxx>
#include <odb/no-op-cache-traits.hxx>
#include <odb/query-dynamic.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // ContinuumComponent
  //
  template <>
  struct class_traits< ::askap::cp::sms::datamodel::ContinuumComponent >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::askap::cp::sms::datamodel::ContinuumComponent >
  {
    public:
    typedef ::askap::cp::sms::datamodel::ContinuumComponent object_type;
    typedef ::boost::shared_ptr< ::askap::cp::sms::datamodel::ContinuumComponent > pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::askap::cp::sms::datamodel::id_type id_type;
    typedef ::askap::cp::sms::datamodel::version_type version_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    struct polarisation_tag;
    struct data_source_tag;

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };

  template <typename A>
  struct pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, A >
  {
    // version
    //
    typedef odb::query_column< ::askap::cp::sms::datamodel::version_type > version_type_;

    static version_type_ version;

    // continuum_component_id
    //
    typedef odb::query_column< ::askap::cp::sms::datamodel::id_type > continuum_component_id_type_;

    static continuum_component_id_type_ continuum_component_id;

    // polarisation
    //
    typedef odb::query_column< ::askap::cp::sms::datamodel::id_type > polarisation_type_;

    static polarisation_type_ polarisation;

    // data_source
    //
    typedef odb::query_column< ::askap::cp::sms::datamodel::id_type > data_source_type_;

    static data_source_type_ data_source;
  };

#ifdef ODB_COMMON_QUERY_COLUMNS_DEF

  template <typename A>
  typename pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, A >::version_type_
  pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, A >::version;

  template <typename A>
  typename pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, A >::continuum_component_id_type_
  pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, A >::continuum_component_id;

  template <typename A>
  typename pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, A >::polarisation_type_
  pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, A >::polarisation;

  template <typename A>
  typename pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, A >::data_source_type_
  pointer_query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, A >::data_source;

#endif // ODB_COMMON_QUERY_COLUMNS_DEF

  template <>
  class access::object_traits_impl< ::askap::cp::sms::datamodel::ContinuumComponent, id_common >:
    public access::object_traits< ::askap::cp::sms::datamodel::ContinuumComponent >
  {
    public:
    typedef odb::query_base query_base_type;

    struct function_table_type
    {
      void (*persist) (database&, object_type&);
      pointer_type (*find1) (database&, const id_type&);
      bool (*find2) (database&, const id_type&, object_type&);
      bool (*reload) (database&, object_type&);
      void (*update) (database&, const object_type&);
      void (*erase1) (database&, const id_type&);
      void (*erase2) (database&, const object_type&);
      result<object_type> (*query) (database&, const query_base_type&);
      unsigned long long (*erase_query) (database&, const query_base_type&);
    };

    static const function_table_type* function_table[database_count];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);
  };

  // ContinuumComponent
  //
  template <>
  struct alias_traits<
    ::askap::cp::sms::datamodel::Polarisation,
    id_common,
    access::object_traits_impl< ::askap::cp::sms::datamodel::ContinuumComponent, id_common >::polarisation_tag>
  {
  };

  template <>
  struct alias_traits<
    ::askap::cp::sms::datamodel::DataSource,
    id_common,
    access::object_traits_impl< ::askap::cp::sms::datamodel::ContinuumComponent, id_common >::data_source_tag>
  {
  };

  template <>
  struct query_columns_base< ::askap::cp::sms::datamodel::ContinuumComponent, id_common >
  {
    // polarisation
    //
    typedef
    odb::alias_traits<
      ::askap::cp::sms::datamodel::Polarisation,
      id_common,
      access::object_traits_impl< ::askap::cp::sms::datamodel::ContinuumComponent, id_common >::polarisation_tag>
    polarisation_alias_;

    // data_source
    //
    typedef
    odb::alias_traits<
      ::askap::cp::sms::datamodel::DataSource,
      id_common,
      access::object_traits_impl< ::askap::cp::sms::datamodel::ContinuumComponent, id_common >::data_source_tag>
    data_source_alias_;
  };

  template <typename A>
  struct query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, A >:
    query_columns_base< ::askap::cp::sms::datamodel::ContinuumComponent, id_common >
  {
    // version
    //
    typedef odb::query_column< ::askap::cp::sms::datamodel::version_type > version_type_;

    static version_type_ version;

    // continuum_component_id
    //
    typedef odb::query_column< ::askap::cp::sms::datamodel::id_type > continuum_component_id_type_;

    static continuum_component_id_type_ continuum_component_id;

    // polarisation
    //
    typedef odb::query_column< ::askap::cp::sms::datamodel::id_type > polarisation_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::askap::cp::sms::datamodel::Polarisation,
        id_common,
        polarisation_alias_ > >
    polarisation_pointer_type_;

    struct polarisation_type_: polarisation_pointer_type_, polarisation_column_type_
    {
    };

    static polarisation_type_ polarisation;

    // data_source
    //
    typedef odb::query_column< ::askap::cp::sms::datamodel::id_type > data_source_column_type_;

    typedef
    odb::query_pointer<
      odb::pointer_query_columns<
        ::askap::cp::sms::datamodel::DataSource,
        id_common,
        data_source_alias_ > >
    data_source_pointer_type_;

    struct data_source_type_: data_source_pointer_type_, data_source_column_type_
    {
    };

    static data_source_type_ data_source;
  };

#ifdef ODB_COMMON_QUERY_COLUMNS_DEF

  template <typename A>
  typename query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, A >::version_type_
  query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, A >::version;

  template <typename A>
  typename query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, A >::continuum_component_id_type_
  query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, A >::continuum_component_id;

  template <typename A>
  typename query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, A >::polarisation_type_
  query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, A >::polarisation;

  template <typename A>
  typename query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, A >::data_source_type_
  query_columns< ::askap::cp::sms::datamodel::ContinuumComponent, id_common, A >::data_source;

#endif // ODB_COMMON_QUERY_COLUMNS_DEF
}

#include "ContinuumComponent-odb.i"

#include <odb/post.hxx>

#endif // CONTINUUM_COMPONENT_ODB_H
