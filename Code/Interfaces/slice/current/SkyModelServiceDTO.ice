/// ----------------------------------------------------------------------------
/// This file is generated by schema_definitions/generate.py.
/// Do not edit directly or your changes will be lost!
/// ----------------------------------------------------------------------------
///
/// @copyright (c) 2016 CSIRO
/// Australia Telescope National Facility (ATNF)
/// Commonwealth Scientific and Industrial Research Organisation (CSIRO)
/// PO Box 76, Epping NSW 1710, Australia
/// atnf-enquiries@csiro.au
///
/// This file is part of the ASKAP software distribution.
///
/// The ASKAP software distribution is free software: you can redistribute it
/// and/or modify it under the terms of the GNU General Public License as
/// published by the Free Software Foundation; either version 2 of the License,
/// or (at your option) any later version.
///
/// This program is distributed in the hope that it will be useful,
/// but WITHOUT ANY WARRANTY; without even the implied warranty of
/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
/// GNU General Public License for more details.
///
/// You should have received a copy of the GNU General Public License
/// along with this program; if not, write to the Free Software
/// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
///
/// @author Daniel Collins <daniel.collins@csiro.au>

#pragma once

#include <CommonTypes.ice>

module askap
{
module interfaces
{
module skymodelservice
{

    /**
     * Continuum component polarisation data.
     **/
    struct ContinuumComponentPolarisation
    {
        /// @brief Component identifier
        /// UCD: meta.id;meta.main
        string componentId;

        /// @brief Band-median value for Stokes I spectrum (mJy/beam)
        /// UCD: phot.flux.density;em.radio
        double fluxIMedian;

        /// @brief Band-median value for Stokes Q spectrum (mJy/beam)
        /// UCD: phot.flux.density;em.radio;askap:phys.polarization.stokes.Q
        double fluxQMedian;

        /// @brief Band-median value for Stokes U spectrum (mJy/beam)
        /// UCD: phot.flux.density;em.radio;askap:phys.polarization.stokes.U
        double fluxUMedian;

        /// @brief Band-median value for Stokes V spectrum (mJy/beam)
        /// UCD: phot.flux.density;em.radio;askap:phys.polarization.stokes.V
        double fluxVMedian;

        /// @brief Band-median sensitivity for Stokes I spectrum (mJy/beam)
        /// UCD: stat.stdev;phot.flux.density
        double rmsI;

        /// @brief Band-median sensitivity for Stokes Q spectrum (mJy/beam)
        /// UCD: stat.stdev;phot.flux.density;askap:phys.polarization.stokes.Q
        double rmsQ;

        /// @brief Band-median sensitivity for Stokes U spectrum (mJy/beam)
        /// UCD: stat.stdev;phot.flux.density;askap:phys.polarization.stokes.U
        double rmsU;

        /// @brief Band-median sensitivity for Stokes V spectrum (mJy/beam)
        /// UCD: stat.stdev;phot.flux.density;askap:phys.polarization.stokes.V
        double rmsV;

        /// @brief First order coefficient for polynomial fit to Stokes I spectrum
        /// UCD: stat.fit.param;spect.continuum
        double co1;

        /// @brief Second order coefficient for polynomial fit to Stokes I spectrum
        /// UCD: stat.fit.param;spect.continuum
        double co2;

        /// @brief Third order coefficient for polynomial fit to Stokes I spectrum
        /// UCD: stat.fit.param;spect.continuum
        double co3;

        /// @brief Fourth order coefficient for polynomial fit to Stokes I spectrum
        /// UCD: stat.fit.param;spect.continuum
        double co4;

        /// @brief Fifth order coefficient for polynomial fit to Stokes I spectrum
        /// UCD: stat.fit.param;spect.continuum
        double co5;

        /// @brief Reference wavelength squared (m^2)
        /// UCD: askap:em.wl.squared
        double lambdaRefSq;

        /// @brief Full-width at half maximum of the rotation measure spread function (rad/m^2)
        /// UCD: phys.polarization.rotMeasure;askap:phys.polarization.rmsfWidth
        double rmsfFwhm;

        /// @brief Peak polarised intensity in the Faraday Dispersion Function (mJy/beam)
        /// UCD: phot.flux.density;phys.polarization.rotMeasure;stat.max
        double polPeak;

        /// @brief Effective peak polarised intensity after correction for bias (mJy/beam)
        /// UCD: phot.flux.density;phys.polarization.rotMeasure;stat.max;askap:meta.corrected
        double polPeakDebias;

        /// @brief Uncertainty in pol_peak (mJy/beam)
        /// UCD: stat.error;phot.flux.density;phys.polarization.rotMeasure;stat.max
        double polPeakErr;

        /// @brief Peak polarised intensity from a three-point parabolic fit (mJy/beam)
        /// UCD: phot.flux.density;phys.polarization.rotMeasure;stat.max;stat.fit
        double polPeakFit;

        /// @brief Peak polarised intensity, corrected for bias, from a three-point parabolic fit (mJy/beam)
        /// UCD: phot.flux.density;phys.polarization.rotMeasure;stat.max;stat.fit;askap:meta.corrected
        double polPeakFitDebias;

        /// @brief Uncertainty in pol_peak_fit (mJy/beam)
        /// UCD: stat.error;phot.flux.density;phys.polarization.rotMeasure;stat.max;stat.fit
        double polPeakFitErr;

        /// @brief Signal-to-noise ratio of the peak polarisation
        /// UCD: stat.snr;phot.flux.density;phys.polarization.rotMeasure;stat.max;stat.fit
        double polPeakFitSnr;

        /// @brief Uncertainty in pol_peak_fit_snr
        /// UCD: stat.error;stat.snr;phot.flux.density;phys.polarization.rotMeasure;stat.max;stat.fit
        double polPeakFitSnrErr;

        /// @brief Faraday Depth from the channel with the peak of the Faraday Dispersion Function (rad/m^2)
        /// UCD: phys.polarization.rotMeasure
        double fdPeak;

        /// @brief Uncertainty in far_depth_peak (rad/m^2)
        /// UCD: stat.error;phys.polarization.rotMeasure
        double fdPeakErr;

        /// @brief Faraday Depth from fit to peak in Faraday Dispersion Function (rad/m^2)
        /// UCD: phys.polarization.rotMeasure;stat.fit
        double fdPeakFit;

        /// @brief uncertainty in fd_peak_fit (rad/m^2)
        /// UCD: stat.error;phys.polarization.rotMeasure;stat.fit
        double fdPeakFitErr;

        /// @brief Polarisation angle at the reference wavelength (deg)
        /// UCD: askap:phys.polarization.angle
        double polAngRef;

        /// @brief Uncertainty in pol_ang_ref (deg)
        /// UCD: stat.error;askap:phys.polarization.angle
        double polAngRefErr;

        /// @brief Polarisation angle de-rotated to zero wavelength (deg)
        /// UCD: askap:phys.polarization.angle;askap:meta.corrected
        double polAngZero;

        /// @brief Uncertainty in pol_ang_zero (deg)
        /// UCD: stat.error;askap:phys.polarization.angle;askap:meta.corrected
        double polAngZeroErr;

        /// @brief Fractional polarisation
        /// UCD: phys.polarization
        double polFrac;

        /// @brief Uncertainty in fractional polarisation
        /// UCD: stat.error;phys.polarization
        double polFracErr;

        /// @brief Statistical measure of polarisation complexity
        /// UCD: stat.value;phys.polarization
        double complex1;

        /// @brief Statistical measure of polarisation complexity after removal of a thin-screen model.
        /// UCD: stat.value;phys.polarization
        double complex2;

        /// @brief True if pol_peak_fit is above a threshold value otherwise pol_peak_fit is an upper limit.
        /// UCD: meta.code
        bool flagP1;

        /// @brief True if FDF peak is close to edge
        /// UCD: meta.code
        bool flagP2;

        /// @brief placeholder flag
        /// UCD: meta.code
        bool flagP3;

        /// @brief placeholder flag
        /// UCD: meta.code
        bool flagP4;

    };

    /**
     * A continuum component.
     **/
    class ContinuumComponent
    {
        optional(1) ContinuumComponentPolarisation polarisation;

        /// @brief The observation date (Posix Date-time)
        /// UCD: 
        string observationDate;

        /// @brief The HEALPix index of this component
        /// UCD: 
        long healpixIndex;

        /// @brief Scheduling Block identifier
        /// UCD: 
        long sbId;

        /// @brief Component identifier
        /// UCD: meta.id;meta.main
        string componentId;

        /// @brief J2000 right ascension (deg)
        /// UCD: pos.eq.ra;meta.main
        double ra;

        /// @brief J2000 declination (deg)
        /// UCD: pos.eq.dec;meta.main
        double dec;

        /// @brief Error in Right Ascension (arcsec)
        /// UCD: stat.error;pos.eq.ra
        float raErr;

        /// @brief Error in Declination (arcsec)
        /// UCD: stat.error;pos.eq.dec
        float decErr;

        /// @brief Frequency (MHz)
        /// UCD: em.freq
        float freq;

        /// @brief Peak flux density (mJy/beam)
        /// UCD: phot.flux.density;stat.max;em.radio;stat.fit
        float fluxPeak;

        /// @brief Error in peak flux density (mJy/beam)
        /// UCD: stat.error;phot.flux.density;stat.max;em.radio;stat.fit
        float fluxPeakErr;

        /// @brief Integrated flux density (mJy)
        /// UCD: phot.flux.density;em.radio;stat.fit
        float fluxInt;

        /// @brief Error in integrated flux density (mJy)
        /// UCD: stat.error;phot.flux.density;em.radio;stat.fit
        float fluxIntErr;

        /// @brief FWHM major axis before deconvolution (arcsec)
        /// UCD: phys.angSize.smajAxis;em.radio;stat.fit
        float majAxis;

        /// @brief FWHM minor axis before deconvolution (arcsec)
        /// UCD: phys.angSize.sminAxis;em.radio;stat.fit
        float minAxis;

        /// @brief Position angle before deconvolution (deg)
        /// UCD: phys.angSize;pos.posAng;em.radio;stat.fit
        float posAng;

        /// @brief Error in major axis before deconvolution (arcsec)
        /// UCD: stat.error;phys.angSize.smajAxis;em.radio
        float majAxisErr;

        /// @brief Error in minor axis before deconvolution (arcsec)
        /// UCD: stat.error;phys.angSize.sminAxis;em.radio
        float minAxisErr;

        /// @brief Error in position angle before deconvolution (deg)
        /// UCD: stat.error;phys.angSize;pos.posAng;em.radio
        float posAngErr;

        /// @brief FWHM major axis after deconvolution (arcsec)
        /// UCD: phys.angSize.smajAxis;em.radio;askap:meta.deconvolved
        float majAxisDeconv;

        /// @brief FWHM minor axis after deconvolution (arcsec)
        /// UCD: phys.angSize.sminAxis;em.radio;askap:meta.deconvolved
        float minAxisDeconv;

        /// @brief Position angle after deconvolution (deg)
        /// UCD: phys.angSize;pos.posAng;em.radio;askap:meta.deconvolved
        float posAngDeconv;

        /// @brief Chi-squared value of Gaussian fit
        /// UCD: stat.fit.chi2
        float chiSquaredFit;

        /// @brief RMS residual of Gaussian fit (mJy/beam)
        /// UCD: stat.stdev;stat.fit
        float rmsFitGauss;

        /// @brief Spectral index (First Taylor term)
        /// UCD: spect.index;em.radio
        float spectralIndex;

        /// @brief Spectral curvature (Second Taylor term)
        /// UCD: askap:spect.curvature;em.radio
        float spectralCurvature;

        /// @brief rms noise level in image (mJy/beam)
        /// UCD: stat.stdev;phot.flux.density
        float rmsImage;

        /// @brief Source has siblings
        /// UCD: meta.code
        bool hasSiblings;

        /// @brief Component parameters are initial estimate, not from fit
        /// UCD: meta.code
        bool fitIsEstimate;

    };

};
};
};
